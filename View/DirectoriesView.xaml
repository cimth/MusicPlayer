<UserControl x:Class="View.DirectoriesView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:View"
             xmlns:converter="clr-namespace:View.Converter"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:svgc="http://sharpvectors.codeplex.com/svgc/"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="400">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <converter:InvertBooleanToVisibilityConverter x:Key="InvertBooleanToVisibilityConverter" />
        <converter:DoubleSecondsToTimerStringConverter x:Key="DoubleSecondsToTimerStringConverter" />
        <converter:StringArrayToCommaSeparatedStringConverter x:Key="StringArrayToCommaSeparatedStringConverter" />
        <converter:IsVisibleToRowHeightConverter x:Key="IsVisibleToRowHeightConverter" />
        <converter:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
        <converter:InvertNullToVisibilityConverter x:Key="InvertNullToVisibilityConverter" />
    </UserControl.Resources>
    
    <!-- Use wrapper Grid because two Grids cannot be the child of a UserControl
         However, only one child Grid is shown at each time. -->
    <Grid>
        <!-- Root directories -->
        <Grid Visibility="{Binding CurrentDirectoryPath, Converter={StaticResource InvertNullToVisibilityConverter}}">
            <!-- Grid layout -->
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            
            <!-- Header -->
            <StackPanel Grid.Row="0" Style="{DynamicResource HeaderToolbarStyle}">
                <!-- Heading -->
                <Label x:Name="LabelRootMusicDirectories" Content="Root music directories" />
                
                <!-- Add music directory -->
                <Button ToolTip="Add" Command="{Binding AddMusicDirectoryCommand}"
                        Height="{Binding ActualHeight, ElementName=LabelRootMusicDirectories}">
                    <Image Source="{svgc:SvgImage Resources/Icons/add-circle-outline.svg}" />
                </Button>
            
                <!-- Remove music directory -->
                <Button ToolTip="Remove" Command="{Binding RemoveMusicDirectoryCommand}"
                        Height="{Binding ActualHeight, ElementName=LabelRootMusicDirectories}">
                    <Image Source="{svgc:SvgImage Resources/Icons/remove-circle-outline.svg}" />
                </Button>
            </StackPanel>
            
            <!-- Actual root directories -->
            <ListView Grid.Row="1"
                      ItemsSource="{Binding RootMusicDirectories}"
                      SelectedItem="{Binding SelectedSubDirectoryPath}"
                      BorderThickness="0">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding OpenSubDirectoryCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ListView>
        </Grid>
        
        <!-- The current directory's contents -->
        <Grid Visibility="{Binding CurrentDirectoryPath, Converter={StaticResource NullToVisibilityConverter}}">
            <!-- Grid layout -->
            <Grid.RowDefinitions>
                <!-- Bind height to IsExpanded so that on True the expander gets half of the height 
                     and when on False its set to Auto so that the Expander does not take the (empty) half space -->
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding IsVisible, ElementName=SubDirectories, Converter={StaticResource IsVisibleToRowHeightConverter}}" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding IsVisible, ElementName=MusicFiles, Converter={StaticResource IsVisibleToRowHeightConverter}}" />
            </Grid.RowDefinitions>
            
            <!-- Header for sub directories -->
            <StackPanel Grid.Row="0" Style="{DynamicResource HeaderToolbarStyle}"
                        Visibility="{Binding HasSubDirectories, Converter={StaticResource BooleanToVisibilityConverter}}">
                <!-- Go back to parent directory -->
                <Button ToolTip="Back" Command="{Binding GoBackCommand}"
                        Height="{Binding ActualHeight, ElementName=LabelSubDirectories}">
                    <Image Source="{svgc:SvgImage Resources/Icons/arrow-back-circle-outline.svg}" />
                </Button>
                
                <!-- Heading -->
                <Label x:Name="LabelSubDirectories" Content="Sub directories" 
                       Visibility="{Binding HasSubDirectories, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </StackPanel>
            
            <!-- Sub directories -->
            <ListView x:Name="SubDirectories" Grid.Row="1"
                      Visibility="{Binding HasSubDirectories, Converter={StaticResource BooleanToVisibilityConverter}}"
                      ItemsSource="{Binding SubDirectoryPaths}"
                      SelectedItem="{Binding SelectedSubDirectoryPath}"
                      BorderThickness="0">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding OpenSubDirectoryCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ListView>
            
            <!-- Header for music files -->
            <StackPanel Grid.Row="2" Style="{DynamicResource HeaderToolbarStyle}">
                <!-- 
                    Go back to parent directory.
                    Only show if no sub directories exist because then the sub directory header (including its 
                    back navigation button) are collapsed.
                 -->
                <Button ToolTip="Back" Command="{Binding GoBackCommand}"
                        Height="{Binding ActualHeight, ElementName=LabelMusicFiles}"
                        Visibility="{Binding HasSubDirectories, Converter={StaticResource InvertBooleanToVisibilityConverter}}">
                    <Image Source="{svgc:SvgImage Resources/Icons/arrow-back-circle-outline.svg}" />
                </Button>
                
                <!-- Heading -->
                <Label x:Name="LabelMusicFiles" Content="Music files"
                       Visibility="{Binding HasMusicFiles, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </StackPanel>
            
            <local:PlaylistGrid x:Name="MusicFiles" Grid.Row="3" 
                                Visibility="{Binding HasMusicFiles, Converter={StaticResource BooleanToVisibilityConverter}}"
                                ItemsSource="{Binding PlaylistFromDirectory.Songs}"
                                SelectedItem="{Binding SelectedSong}"
                                SelectedIndex="{Binding SelectedPlaylistIndex}">
                <!-- 
                    Use Interaction.Triggers to bind the mouse events to commands.
                    With the ListView settings, only Code-Behind methods can be called.
                -->
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding PlayAllSongsInDirectoryStartingWithTheSelectedSongCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                
                <!-- Show data as columns via GridView -->
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Title" Width="2*"
                                        Binding="{Binding Title}" />
                    <DataGridTextColumn Header="Artists" Width="*"
                                        Binding="{Binding Artists, Converter={StaticResource StringArrayToCommaSeparatedStringConverter}}" />
                    <DataGridTextColumn Header="Duration" Width="Auto"
                                        Binding="{Binding Duration.TotalSeconds, Converter={StaticResource DoubleSecondsToTimerStringConverter}}" />
                    <DataGridTextColumn Header="Album" Width="Auto"
                                        Binding="{Binding Album}" />
                </DataGrid.Columns>
            </local:PlaylistGrid>
        </Grid>
    </Grid>
</UserControl>
