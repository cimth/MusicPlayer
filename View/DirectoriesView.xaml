<UserControl x:Class="View.DirectoriesView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:View"
             xmlns:converter="clr-namespace:View.Converter"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="400">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <converter:DoubleSecondsToTimerStringConverter x:Key="DoubleSecondsToTimerStringConverter" />
        <converter:StringArrayToCommaSeparatedStringConverter x:Key="StringArrayToCommaSeparatedStringConverter" />
        <converter:IsVisibleToRowHeightConverter x:Key="IsVisibleToRowHeightConverter" />
        <converter:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
        <converter:InvertNullToVisibilityConverter x:Key="InvertNullToVisibilityConverter" />
    </UserControl.Resources>
    
    <Grid>
        <!-- Grid layout -->
        <Grid.RowDefinitions>
            <!-- Toolbar -->
            <RowDefinition Height="Auto" />
            <!-- Grid with actual content -->
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        
        <!-- Toolbar for Buttons (visible when showing the root music directories) -->
        <StackPanel Grid.Row="0" Orientation="Horizontal" Background="MintCream"
                    Visibility="{Binding CurrentDirectoryPath, Converter={StaticResource NullToVisibilityConverter}}">
            <!-- Set margin on buttons -->
            <StackPanel.Resources>
                <Style TargetType="{x:Type Button}">
                    <Setter Property="Margin" Value="5" />
                </Style>
            </StackPanel.Resources>
            
            <!-- Go back to parent directory -->
            <Button Content="Back" Command="{Binding GoBackCommand}"/>
        </StackPanel>
        
        <!-- Toolbar for Path (visible when in directory) -->
        <StackPanel Grid.Row="0" Orientation="Horizontal" Background="MintCream"
                    Visibility="{Binding CurrentDirectoryPath, Converter={StaticResource InvertNullToVisibilityConverter}}">
            <!-- Set margin on buttons -->
            <StackPanel.Resources>
                <Style TargetType="{x:Type Button}">
                    <Setter Property="Margin" Value="5" />
                </Style>
            </StackPanel.Resources>
            
            <!-- Add music directory -->
            <Button Content="Add" Command="{Binding AddMusicDirectoryCommand}"/>
            
            <!-- Remove music directory -->
            <Button Content="Remove" Command="{Binding RemoveMusicDirectoryCommand}"/>
        </StackPanel>
        
        <!-- Root directories -->
        <Grid Grid.Row="1" Visibility="{Binding CurrentDirectoryPath, Converter={StaticResource InvertNullToVisibilityConverter}}">
            <!-- Grid layout -->
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            
            <!-- Root directories -->
            <Label Grid.Row="0"
                   Content="Root music directories"
                   Background="Aquamarine" />
            
            <ListView Grid.Row="1"
                      ItemsSource="{Binding RootMusicDirectories}"
                      SelectedItem="{Binding SelectedSubDirectoryPath}"
                      BorderThickness="0">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding OpenSubDirectoryCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ListView>
        </Grid>
        
        <!-- Lists with the current directory's contents -->
        <Grid Grid.Row="1" Visibility="{Binding CurrentDirectoryPath, Converter={StaticResource NullToVisibilityConverter}}">
            <!-- Grid layout -->
            <Grid.RowDefinitions>
                <!-- Bind height to IsExpanded so that on True the expander gets half of the height 
                     and when on False its set to Auto so that the Expander does not take the (empty) half space -->
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding IsVisible, ElementName=SubDirectories, Converter={StaticResource IsVisibleToRowHeightConverter}}" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding IsVisible, ElementName=MusicFiles, Converter={StaticResource IsVisibleToRowHeightConverter}}" />
            </Grid.RowDefinitions>
            
            <!-- Sub directories -->
            <Label Grid.Row="0"
                   Visibility="{Binding HasSubDirectories, Converter={StaticResource BooleanToVisibilityConverter}}"
                   Content="Sub directories"
                   Background="Aquamarine" />
            
            <ListView x:Name="SubDirectories" Grid.Row="1"
                      Visibility="{Binding HasSubDirectories, Converter={StaticResource BooleanToVisibilityConverter}}"
                      ItemsSource="{Binding SubDirectoryPaths}"
                      SelectedItem="{Binding SelectedSubDirectoryPath}"
                      BorderThickness="0">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding OpenSubDirectoryCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ListView>
            
            <!-- Music files -->
            <Label Grid.Row="2" 
                   Visibility="{Binding HasMusicFiles, Converter={StaticResource BooleanToVisibilityConverter}}"
                   Content="Music Files" 
                   Background="Aquamarine" />
            
            <local:PlaylistGrid x:Name="MusicFiles" Grid.Row="3" 
                                Visibility="{Binding HasMusicFiles, Converter={StaticResource BooleanToVisibilityConverter}}"
                                ItemsSource="{Binding PlaylistFromDirectory.Songs}"
                                SelectedItem="{Binding SelectedSong}"
                                SelectedIndex="{Binding SelectedPlaylistIndex}">
                <!-- 
                    Use Interaction.Triggers to bind the mouse events to commands.
                    With the ListView settings, only Code-Behind methods can be called.
                -->
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding PlayAllSongsInDirectoryStartingWithTheSelectedSongCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                
                <!-- Show data as columns via GridView -->
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Title" Width="2*"
                                        Binding="{Binding Title}" />
                    <DataGridTextColumn Header="Artists" Width="*"
                                        Binding="{Binding Artists, Converter={StaticResource StringArrayToCommaSeparatedStringConverter}}" />
                    <DataGridTextColumn Header="Duration" Width="Auto"
                                        Binding="{Binding Duration.TotalSeconds, Converter={StaticResource DoubleSecondsToTimerStringConverter}}" />
                    <DataGridTextColumn Header="Album" Width="Auto"
                                        Binding="{Binding Album}" />
                </DataGrid.Columns>
            </local:PlaylistGrid>
        </Grid>
    </Grid>
</UserControl>
