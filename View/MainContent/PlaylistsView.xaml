<UserControl x:Class="View.MainContent.PlaylistsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:View"
             xmlns:converter="clr-namespace:View.Converter"
             xmlns:svgc="http://sharpvectors.codeplex.com/svgc/"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:templates="clr-namespace:View.Templates"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300"
             BorderBrush="{StaticResource AppTurquoiseBorderBrush}" BorderThickness="0 1 0 0">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <converter:InvertBooleanToVisibilityConverter x:Key="InvertBooleanToVisibilityConverter" />
        <converter:FullPathToLastPathPartConverter x:Key="FullPathToLastPathPartConverter" />
        <converter:DoubleSecondsToTimerStringConverter x:Key="DoubleSecondsToTimerStringConverter" />
        <converter:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
        <converter:InvertNullToVisibilityConverter x:Key="InvertNullToVisibilityConverter" />
        <converter:EqualsConverter x:Key="EqualsConverter" />
        <converter:StringArrayToCommaSeparatedStringConverter x:Key="StringArrayToCommaSeparatedStringConverter" />
    </UserControl.Resources>
    
    <Grid>
        <!-- Grid layout -->
        <Grid.RowDefinitions>
            <!-- Label for current playlist (or no playlist selected information) -->
            <RowDefinition Height="Auto" />
            <!-- Grid with playlist directories or the playlist's content (only one shown at each time) -->
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        
        <!-- Header Labels -->
        
        <!-- No playlist shown (navigate through directories) -->
        <Grid Grid.Row="0" 
              Visibility="{Binding IsPlaylistShown, Converter={StaticResource InvertBooleanToVisibilityConverter}}">
            <!-- Current directory (if selected) -->
            <Label FontWeight="Bold"
                   Visibility="{Binding CurrentDirectoryNameFromRoot, Converter={StaticResource NullToVisibilityConverter}}"
                   Content="{Binding CurrentDirectoryNameFromRoot}"
                   Background="{StaticResource AppTurquoiseDarkestBrush}" />
            
            <!-- No directory or playlist selected -->
            <Label FontWeight="Bold"
                   Visibility="{Binding CurrentDirectoryNameFromRoot, Converter={StaticResource InvertNullToVisibilityConverter}}"
                   Content="{DynamicResource Str_NoDirectoryOrPlaylistSelected}"
                   Background="{StaticResource AppTurquoiseDarkestBrush}" />
        </Grid>
        
        <!-- Playlist shown -->
        <Grid Grid.Row="0" HorizontalAlignment="Stretch"
              Visibility="{Binding IsPlaylistShown, Converter={StaticResource BooleanToVisibilityConverter}}">
            <!-- Grid layout -->
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            
            <!-- Current directory (if selected) -->
            <Label Grid.Column="0" FontWeight="Bold"
                   Visibility="{Binding CurrentDirectoryNameFromRoot, Converter={StaticResource NullToVisibilityConverter}}"
                   Content="{Binding CurrentDirectoryNameFromRoot}"
                   Background="{StaticResource AppTurquoiseDarkestBrush}" />
            
            <Label Grid.Column="1" FontWeight="Bold" 
                   Visibility="{Binding CurrentDirectoryNameFromRoot, Converter={StaticResource NullToVisibilityConverter}}"
                   Content=" | "
                   Background="{StaticResource AppTurquoiseDarkestBrush}" />
            
            <!-- Current playlist (if selected) -->
            <Label Grid.Column="2" FontWeight="Bold"
                   Content="{Binding SelectedPlaylist.Name}"
                   Background="{StaticResource AppTurquoiseDarkestBrush}" />
        </Grid>
        
        <!-- Show directories on top and playlists on bottom for root directory and sub directories
             (use !IsPlaylistShown for simplifying the condition) -->
        <Grid Grid.Row="1" 
              Visibility="{Binding IsPlaylistShown, Converter={StaticResource InvertBooleanToVisibilityConverter}}">
            <!-- Grid layout -->
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            
            <!-- Header for playlist directories -->
            <Border Grid.Row="0" 
                    BorderBrush="{DynamicResource AppTurquoiseBorderBrush}" BorderThickness="0 1">
                <StackPanel Style="{DynamicResource HeaderToolbarStyle}">
                    
                    <!-- Go back. Only show if not in playlist root directory -->
                    <WrapPanel Visibility="{Binding CurrentDirectoryNameFromRoot, Converter={StaticResource NullToVisibilityConverter}}">
                        <!-- Back to playlist root directory  -->
                        <Button Command="{Binding GoBackToRootCommand}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/home-outline.svg" />
                        </Button>
                    
                        <!-- Go back to parent directory -->
                        <Button ToolTip="{DynamicResource Str_Back}" Command="{Binding GoBackCommand}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/arrow-back-circle-outline.svg" />
                        </Button>
                    </WrapPanel>
                    
                    <!-- Heading -->
                    <Label Content="{DynamicResource Str_SubDirectories}" />
                    
                    <!-- Separator -->
                    <Separator />
                    
                    <!-- Add playlist sub directory -->
                    <Button ToolTip="{DynamicResource Str_Add}" Command="{Binding AddSubDirectoryCommand}">
                        <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/add-circle-outline.svg" />
                    </Button>
                
                    <!-- Remove playlist sub directory -->
                    <Button ToolTip="{DynamicResource Str_Remove}" Command="{Binding RemoveSubDirectoryCommand}">
                        <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/remove-circle-outline.svg" />
                    </Button>
                    
                    <!-- Separator -->
                    <Separator />
                    
                    <!-- Rename playlist -->
                    <Button ToolTip="{DynamicResource Str_Rename}" Command="{Binding RenameSubDirectoryCommand}">
                        <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/pencil.svg" />
                    </Button>
                </StackPanel>
            </Border>
            
            <!-- Directories -->
            <templates:PlaylistGrid Grid.Row="1"
                      ItemsSource="{Binding SubDirectoryPaths}"
                      SelectedItem="{Binding SelectedSubDirectoryPath}"
                      SelectedIndex="{Binding SelectedSubDirectoryIndex}"
                      HeadersVisibility="None">
                <!-- 
                    Use Interaction.Triggers to bind the mouse events to commands.
                    With the elements XML properties, only Code-Behind methods can be called.
                -->
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding OpenSubDirectoryCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                
                <!-- KeyBindings -->
                <templates:PlaylistGrid.InputBindings>
                    <KeyBinding Key="Delete" Command="{Binding RemoveSubDirectoryCommand}" />
                    <KeyBinding Key="Enter" Command="{Binding OpenSubDirectoryCommand}" />
                    <KeyBinding Key="Back" Command="{Binding GoBackCommand}" />
                </templates:PlaylistGrid.InputBindings>
                
                <!-- Show data as columns -->
                <DataGrid.Columns>
                    <DataGridTextColumn Width="*" Binding="{Binding Converter={StaticResource FullPathToLastPathPartConverter}}" />
                </DataGrid.Columns>
            </templates:PlaylistGrid>
            
            <!-- Header for playlists inside the current directory -->
            <Border Grid.Row="2" 
                    BorderBrush="{DynamicResource AppTurquoiseBorderBrush}" BorderThickness="0 1">
                <StackPanel Style="{DynamicResource HeaderToolbarStyle}">
                    <!-- Heading -->
                    <Label Content="{DynamicResource Str_Playlists}" />
                    
                    <!-- Separator -->
                    <Separator />
                    
                    <!-- Add playlist -->
                    <Button ToolTip="{DynamicResource Str_Add}" Command="{Binding AddPlaylistCommand}">
                        <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/add-circle-outline.svg" />
                    </Button>
                
                    <!-- Remove playlist -->
                    <Button ToolTip="{DynamicResource Str_Remove}" Command="{Binding RemovePlaylistCommand}">
                        <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/remove-circle-outline.svg" />
                    </Button>
                    
                    <!-- Duplicate playlist -->
                    <Button ToolTip="{DynamicResource Str_Duplicate}" Command="{Binding DuplicatePlaylistCommand}">
                        <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/documents-outline.svg" />
                    </Button>
                    
                    <!-- Separator -->
                    <Separator />
                    
                    <!-- Rename playlist -->
                    <Button ToolTip="{DynamicResource Str_Rename}" Command="{Binding RenamePlaylistCommand}">
                        <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/pencil.svg" />
                    </Button>
                    
                    <!-- Export playlist into directory -->
                    <Button ToolTip="{DynamicResource Str_ExportIntoDirectory}" Command="{Binding ExportPlaylistIntoDirectoryCommand}">
                        <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/export-mp3-outline.svg" />
                    </Button>
                    
                    <!-- Export playlist into file -->
                    <Button ToolTip="{DynamicResource Str_ExportIntoFile}" Command="{Binding ExportPlaylistIntoFileCommand}">
                        <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/export-m3u-outline.svg" />
                    </Button>
                    
                    <!-- Separator -->
                    <Separator />
                    
                    <!-- Add to queue -->
                    <Button ToolTip="{DynamicResource Str_AddToQueue}" Command="{Binding AddToQueueCommand}">
                        <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/list-circle-outline.svg" />
                    </Button>
                </StackPanel>
            </Border>
            
            <templates:PlaylistGrid Grid.Row="3" 
                                ItemsSource="{Binding PlaylistsInDirectory}"
                                SelectedItem="{Binding  SelectedPlaylist}"
                                SelectedIndex="{Binding  SelectedPlaylistIndex}">
                <!-- 
                    Use Interaction.Triggers to bind the mouse events to commands.
                    With the elements XML properties, only Code-Behind methods can be called.
                -->
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding OpenPlaylistCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                
                <!-- KeyBindings -->
                <templates:PlaylistGrid.InputBindings>
                    <KeyBinding Key="Delete" Command="{Binding RemovePlaylistCommand}" />
                    <KeyBinding Key="Enter" Command="{Binding OpenPlaylistCommand}" />
                    <KeyBinding Key="Back" Command="{Binding GoBackCommand}" />
                </templates:PlaylistGrid.InputBindings>
                
                <!-- Show data as columns -->
                <DataGrid.Columns>
                    <!-- Name -->
                    <DataGridTextColumn MinWidth="450"
                                        Binding="{Binding Name}">
                        <DataGridTextColumn.Header>
                            <TextBlock Text="{DynamicResource Str_Name}" />
                        </DataGridTextColumn.Header>
                    </DataGridTextColumn>
                    
                    <!-- Songs (count) -->
                    <DataGridTextColumn MinWidth="300"
                                        Binding="{Binding Songs.Count}">
                        <DataGridTextColumn.Header>
                            <TextBlock Text="{DynamicResource Str_Songs}" />
                        </DataGridTextColumn.Header>
                    </DataGridTextColumn>
                    
                    <!-- Duration -->
                    <DataGridTextColumn MinWidth="75"
                                        Binding="{Binding TotalDuration.TotalSeconds, Converter={StaticResource DoubleSecondsToTimerStringConverter}}">
                        <DataGridTextColumn.Header>
                            <TextBlock Text="{DynamicResource Str_Duration}" />
                        </DataGridTextColumn.Header>
                    </DataGridTextColumn>
                </DataGrid.Columns>
            </templates:PlaylistGrid>
        </Grid>
        
        <!-- Show playlist songs -->
        <Grid Grid.Row="1" 
              Visibility="{Binding IsPlaylistShown, Converter={StaticResource BooleanToVisibilityConverter}}">
            <!-- Grid layout -->
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            
            <!-- Header for songs -->
            <Border Grid.Row="0" 
                    BorderBrush="{DynamicResource AppTurquoiseBorderBrush}" BorderThickness="0 1">
                <Grid Style="{DynamicResource HeaderToolbarGridStyle}">
                    <!-- Grid layout -->
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    
                    <!-- Left side -->
                    <StackPanel Grid.Column="0">
                        <!-- Back to playlist root directory -->
                        <Button Command="{Binding GoBackToRootCommand}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/home-outline.svg" />
                        </Button>
                    
                        <!-- Go back to parent directory or to root directory -->
                        <!-- Note that the button never should be hidden because you should always go back to a directory -->
                        <Button ToolTip="{DynamicResource Str_Back}" Command="{Binding GoBackCommand}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/arrow-back-circle-outline.svg" />
                        </Button>
                    
                        <!-- Heading -->
                        <Label Content="{DynamicResource Str_Songs}" />
                        
                        <!-- Separator -->
                        <Separator />
                    
                        <!-- Add song -->
                        <Button ToolTip="{DynamicResource Str_Add}" Command="{Binding AddSongToPlaylistCommand}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/add-circle-outline.svg" />
                        </Button>
                    
                        <!-- Remove song -->
                        <Button ToolTip="{DynamicResource Str_Remove}" Command="{Binding RemoveSongFromPlaylistCommand}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/remove-circle-outline.svg" />
                        </Button>
                        
                        <!-- No duplicates -->
                        <ToggleButton ToolTip="{DynamicResource Str_NoDuplicates}" Command="{Binding ChangeNoDuplicatesStateCommand}"
                                      IsChecked="{Binding IsNoDuplicatesActive}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/one-circle-outline.svg" />
                        </ToggleButton>
                        
                        <!-- Separator -->
                        <Separator />
                        
                        <!-- Export playlist into directory -->
                        <Button ToolTip="{DynamicResource Str_ExportIntoDirectory}" Command="{Binding ExportPlaylistIntoDirectoryCommand}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/export-mp3-outline.svg" />
                        </Button>
                    
                        <!-- Export playlist into file -->
                        <Button ToolTip="{DynamicResource Str_ExportIntoFile}" Command="{Binding ExportPlaylistIntoFileCommand}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/export-m3u-outline.svg" />
                        </Button>
                        
                        <!-- Separator -->
                        <Separator />
                        
                        <!-- Add to queue -->
                        <Button ToolTip="{DynamicResource Str_AddToQueue}" Command="{Binding AddToQueueCommand}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/list-circle-outline.svg" />
                        </Button>
                        
                        <!-- Add to favorites -->
                        <Button ToolTip="{DynamicResource Str_AddToFavorites}" Command="{Binding AddToFavoritesCommand}"
                                Visibility="{Binding IsFavorite, Converter={StaticResource InvertBooleanToVisibilityConverter}}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/star-outline.svg" />
                        </Button>
                        
                        <!-- Remove from favorites -->
                        <Button ToolTip="{DynamicResource Str_RemoveFromFavorites}" Command="{Binding RemoveFromFavoritesCommand}"
                                Visibility="{Binding IsFavorite, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <svgc:SvgBitmap AppName="Start" UriSource="/Resources/Icons/star.svg" />
                        </Button>
                    </StackPanel>
                    
                    <!-- Right side -->
                    <StackPanel Grid.Column="1" HorizontalAlignment="Right" Margin="2,0">
                        <!-- Playlist duration -->
                        <Label Content="{DynamicResource Str_DurationWithColon}" />
                        <Label Content="{Binding SelectedPlaylist.TotalDuration.TotalSeconds, Converter={StaticResource DoubleSecondsToTimerStringConverter}}" />
                        
                        <!-- Separator -->
                        <Separator />
                        
                        <!-- Sort playlist -->
                        <Label Content="{DynamicResource Str_SortPlaylist}" />
                        <ComboBox Text="{DynamicResource Str_PleaseSelect}"
                                  ItemsSource="{Binding PlaylistSortOrders}"
                                  SelectedValue="{Binding SelectedPlaylistSortOrder}"
                                  SelectedValuePath="Key"
                                  DisplayMemberPath="Value">
                            <!-- 
                                Use Interaction.Triggers to bind the events to commands.
                                With the elements XML properties, only Code-Behind methods can be called.
                            -->
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="SelectionChanged">
                                    <b:InvokeCommandAction Command="{Binding ChangePlaylistSortOrderCommand}"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ComboBox>
                    </StackPanel>
                </Grid>
            </Border>
            
            <!-- Songs -->
            <templates:PlaylistGrid Grid.Row="1"
                      ItemsSource="{Binding SelectedPlaylist.Songs}"
                      SelectedItem="{Binding SelectedSong}"
                      SelectedIndex="{Binding SelectedSongIndex}"
                      AllowDraggingRows="True"
                      AllowDrop="True">
                <!-- 
                    Use Interaction.Triggers to bind the mouse events to commands.
                    With the elements XML properties, only Code-Behind methods can be called.
                -->
                <b:Interaction.Triggers>
                    <!-- Play song on double click -->
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding StartPlaylistBeginningWithTheSelectedSongCommand}"/>
                    </b:EventTrigger>
                    
                    <!-- Import dropped files -->
                    <b:EventTrigger EventName="PreviewDrop">
                        <!-- Use CallMethodAction to give the EventArgs (including the dropped files) to the
                             called method -->
                        <b:CallMethodAction TargetObject="{Binding}" MethodName="DropFileOntoPlaylist"  />
                    </b:EventTrigger>
                    
                    <!-- React on moved rows -->
                    <b:EventTrigger EventName="OnRowMoved">
                        <b:InvokeCommandAction Command="{Binding UpdateOnRowMovedCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                
                <!-- KeyBindings -->
                <templates:PlaylistGrid.InputBindings>
                    <KeyBinding Key="Delete" Command="{Binding RemoveSongFromPlaylistCommand}" />
                    <KeyBinding Key="Enter" Command="{Binding StartPlaylistBeginningWithTheSelectedSongCommand}" />
                    <KeyBinding Key="Back" Command="{Binding GoBackCommand}" />
                </templates:PlaylistGrid.InputBindings>
                
                <DataGrid.RowStyle>
                    <!-- Base the style on the original style of the PlaylistGrid -->
                    <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource DataGridRowStyle}">
                        <Style.Triggers>
                            <!-- Mark the current song -->
                            <DataTrigger Value="True">
                                <!-- Only apply the style if the song of the considered row is the currently played song -->
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{StaticResource EqualsConverter}">
                                        <Binding Path="DataContext.SongPlayer.CurrentSong" 
                                                 RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type UserControl}}" />
                                        <Binding Path="." />
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                
                                <!-- The style to be applied -->
                                <Setter Property="FontWeight" Value="Bold"/>
                            </DataTrigger>
                            
                            <!-- Mark missing files red -->
                            <DataTrigger Value="True" Binding="{Binding IsFileMissing}">
                                <Setter Property="Foreground" Value="Red" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                
                <!-- Show data as columns -->
                <DataGrid.Columns>
                    <!-- Title -->
                    <DataGridTextColumn MinWidth="450"
                                        Binding="{Binding Title}">
                        <DataGridTextColumn.Header>
                            <TextBlock Text="{DynamicResource Str_Title}" />
                        </DataGridTextColumn.Header>
                    </DataGridTextColumn>
                    
                    <!-- Artists -->
                    <DataGridTextColumn MinWidth="300"
                                        Binding="{Binding Artists, Converter={StaticResource StringArrayToCommaSeparatedStringConverter}}">
                        <DataGridTextColumn.Header>
                            <TextBlock Text="{DynamicResource Str_Artists}" />
                        </DataGridTextColumn.Header>
                    </DataGridTextColumn>
                    
                    <!-- Duration -->
                    <DataGridTextColumn MinWidth="75"
                                        Binding="{Binding Duration.TotalSeconds, Converter={StaticResource DoubleSecondsToTimerStringConverter}}">
                        <DataGridTextColumn.Header>
                            <TextBlock Text="{DynamicResource Str_Duration}" />
                        </DataGridTextColumn.Header>
                    </DataGridTextColumn>
                    
                    <!-- Album -->
                    <DataGridTextColumn MinWidth="300"
                                        Binding="{Binding Album}">
                        <DataGridTextColumn.Header>
                            <TextBlock Text="{DynamicResource Str_Album}" />
                        </DataGridTextColumn.Header>
                    </DataGridTextColumn>
                </DataGrid.Columns>
            </templates:PlaylistGrid>
        </Grid>
    </Grid>
</UserControl>
