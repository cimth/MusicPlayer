<UserControl x:Class="View.MainContent.DirectoriesView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:View"
             xmlns:converter="clr-namespace:View.Converter"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:svgc="http://sharpvectors.codeplex.com/svgc/"
             xmlns:templates="clr-namespace:View.Templates"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="400">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <converter:InvertBooleanToVisibilityConverter x:Key="InvertBooleanToVisibilityConverter" />
        <converter:DoubleSecondsToTimerStringConverter x:Key="DoubleSecondsToTimerStringConverter" />
        <converter:StringArrayToCommaSeparatedStringConverter x:Key="StringArrayToCommaSeparatedStringConverter" />
        <converter:IsVisibleToRowHeightConverter x:Key="IsVisibleToRowHeightConverter" />
        <converter:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
        <converter:InvertNullToVisibilityConverter x:Key="InvertNullToVisibilityConverter" />
        <converter:FullPathToLastPathPartConverter x:Key="FullPathToLastPathPartConverter" />
        <converter:EqualsConverter x:Key="EqualsConverter" />
    </UserControl.Resources>
    
    <Grid>
        <!-- Grid layout -->
        <Grid.RowDefinitions>
            <!-- Label for current directory (or no directory selected information) -->
            <RowDefinition Height="Auto" />
            <!-- Grid with root directories or with the directory's content (only one of the Grids is shown at
                 each time) -->
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        
        <!-- Current directory -->
        <Label Grid.Row="0" FontWeight="Bold"
               Visibility="{Binding CurrentDirectoryPath, Converter={StaticResource NullToVisibilityConverter}}"
               Content="{Binding CurrentDirectoryPath}"
               BorderBrush="{StaticResource AppTurquoiseBorderBrush}" BorderThickness="0 1 0 0"
               Background="{StaticResource AppTurquoiseDarkestBrush}"/>
        
        <!-- No directory selected -->
        <Label Grid.Row="0" FontWeight="Bold"
               Visibility="{Binding CurrentDirectoryPath, Converter={StaticResource InvertNullToVisibilityConverter}}"
               Content="No directory selected"
               BorderBrush="{StaticResource AppTurquoiseBorderBrush}" BorderThickness="0 1 0 0"
               Background="{StaticResource AppTurquoiseDarkestBrush}"/>
        
        <!-- Root directories -->
        <Grid Grid.Row="1" 
              Visibility="{Binding CurrentDirectoryPath, Converter={StaticResource InvertNullToVisibilityConverter}}">
            <!-- Grid layout -->
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            
            <!-- Header -->
            <Border Grid.Row="0" BorderBrush="{DynamicResource AppTurquoiseBorderBrush}" BorderThickness="0 1">
                <StackPanel Style="{DynamicResource HeaderToolbarStyle}">
                    <!-- Heading -->
                    <Label Content="Root music directories" />
                    
                    <!-- Add music directory -->
                    <Button ToolTip="Add" Command="{Binding AddMusicDirectoryCommand}">
                        <Image Source="{svgc:SvgImage /Start;component/Resources/Icons/add-circle-outline.svg}" />
                    </Button>
                
                    <!-- Remove music directory -->
                    <Button ToolTip="Remove" Command="{Binding RemoveMusicDirectoryCommand}">
                        <Image Source="{svgc:SvgImage /Start;component/Resources/Icons/remove-circle-outline.svg}" />
                    </Button>
                </StackPanel>
            </Border>
                
            <!-- Actual root directories -->
            <templates:PlaylistGrid Grid.Row="1"
                      ItemsSource="{Binding RootMusicDirectories}"
                      SelectedItem="{Binding SelectedSubDirectoryPath}"
                      HeadersVisibility="None"
                      BorderThickness="0">
                <!-- 
                    Use Interaction.Triggers to bind the mouse events to commands.
                    With the elements XML properties, only Code-Behind methods can be called.
                -->
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding OpenSubDirectoryCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                
                <!-- Show data as columns -->
                <DataGrid.Columns>
                    <DataGridTextColumn Width="*" Binding="{Binding}" />
                </DataGrid.Columns>
            </templates:PlaylistGrid>
        </Grid>
        
        <!-- The current directory's contents -->
        <Grid Grid.Row="1" 
              Visibility="{Binding CurrentDirectoryPath, Converter={StaticResource NullToVisibilityConverter}}">
            <!-- Grid layout -->
            <Grid.RowDefinitions>
                <!-- Bind height to IsExpanded so that on True the expander gets half of the height 
                     and when on False its set to Auto so that the Expander does not take the (empty) half space -->
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding IsVisible, ElementName=SubDirectories, Converter={StaticResource IsVisibleToRowHeightConverter}}" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding IsVisible, ElementName=MusicFiles, Converter={StaticResource IsVisibleToRowHeightConverter}}" />
            </Grid.RowDefinitions>
            
            <!-- Header for sub directories -->
            <Border Grid.Row="0" 
                    BorderBrush="{DynamicResource AppTurquoiseBorderBrush}" BorderThickness="0 1"
                    Visibility="{Binding HasSubDirectories, Converter={StaticResource BooleanToVisibilityConverter}}">
                <StackPanel Style="{DynamicResource HeaderToolbarStyle}">
                    <!-- Go back to parent directory -->
                    <Button ToolTip="Back" Command="{Binding GoBackCommand}">
                        <Image Source="{svgc:SvgImage /Start;component/Resources/Icons/arrow-back-circle-outline.svg}" />
                    </Button>
                    
                    <!-- Heading -->
                    <Label Content="Sub directories" 
                           Visibility="{Binding HasSubDirectories, Converter={StaticResource BooleanToVisibilityConverter}}" />
                </StackPanel>
            </Border>
            
            <!-- Sub directories -->
            <templates:PlaylistGrid x:Name="SubDirectories" Grid.Row="1"
                      Visibility="{Binding HasSubDirectories, Converter={StaticResource BooleanToVisibilityConverter}}"
                      ItemsSource="{Binding SubDirectoryPaths}"
                      SelectedItem="{Binding SelectedSubDirectoryPath}"
                      HeadersVisibility="None"
                      BorderThickness="0">
                <!-- 
                    Use Interaction.Triggers to bind the mouse events to commands.
                    With the elements XML properties, only Code-Behind methods can be called.
                -->
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding OpenSubDirectoryCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                
                <!-- Show data as columns -->
                <DataGrid.Columns>
                    <DataGridTextColumn Width="*" Binding="{Binding Converter={StaticResource FullPathToLastPathPartConverter}}" />
                </DataGrid.Columns>
            </templates:PlaylistGrid>
            
            <!-- Header for music files -->
            <Border Grid.Row="2" 
                    BorderBrush="{DynamicResource AppTurquoiseBorderBrush}" BorderThickness="0 1"
                    Visibility="{Binding HasMusicFiles, Converter={StaticResource BooleanToVisibilityConverter}}">
                <StackPanel Style="{DynamicResource HeaderToolbarStyle}">
                    <!-- 
                        Go back to parent directory.
                        Only show if no sub directories exist because then the sub directory header (including its 
                        back navigation button) are collapsed.
                     -->
                    <Button ToolTip="Back" Command="{Binding GoBackCommand}"
                            Visibility="{Binding HasSubDirectories, Converter={StaticResource InvertBooleanToVisibilityConverter}}">
                        <Image Source="{svgc:SvgImage /Start;component/Resources/Icons/arrow-back-circle-outline.svg}" />
                    </Button>
                    
                    <!-- Heading -->
                    <Label Content="Music files"
                           Visibility="{Binding HasMusicFiles, Converter={StaticResource BooleanToVisibilityConverter}}" />
                </StackPanel>
            </Border>
            
            <templates:PlaylistGrid x:Name="MusicFiles" Grid.Row="3" 
                                Visibility="{Binding HasMusicFiles, Converter={StaticResource BooleanToVisibilityConverter}}"
                                ItemsSource="{Binding PlaylistFromDirectory.Songs}"
                                SelectedItem="{Binding SelectedSong}"
                                SelectedIndex="{Binding SelectedPlaylistIndex}">
                <!-- 
                    Use Interaction.Triggers to bind the mouse events to commands.
                    With the elements XML properties, only Code-Behind methods can be called.
                -->
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding PlayAllSongsInDirectoryStartingWithTheSelectedSongCommand}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                
                <!-- Mark the current song -->
                <DataGrid.RowStyle>
                    <!-- Base the style on the original style of the PlaylistGrid -->
                    <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource DataGridRowStyle}">
                        <Style.Triggers>
                            <DataTrigger Value="True">
                                <!-- Only apply the style if the song of the considered row is the currently played song -->
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{StaticResource EqualsConverter}">
                                        <Binding Path="DataContext.SongPlayer.CurrentSong" 
                                                 RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type UserControl}}" />
                                        <Binding Path="." />
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                
                                <!-- The style to be applied -->
                                <Setter Property="FontWeight" Value="Bold"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                
                <!-- Show data as columns -->
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Title" Width="2*"
                                        Binding="{Binding Title}" />
                    <DataGridTextColumn Header="Artists" Width="*"
                                        Binding="{Binding Artists, Converter={StaticResource StringArrayToCommaSeparatedStringConverter}}" />
                    <DataGridTextColumn Header="Duration" Width="Auto"
                                        Binding="{Binding Duration.TotalSeconds, Converter={StaticResource DoubleSecondsToTimerStringConverter}}" />
                    <DataGridTextColumn Header="Album" Width="Auto"
                                        Binding="{Binding Album}" />
                </DataGrid.Columns>
            </templates:PlaylistGrid>
        </Grid>
    </Grid>
</UserControl>
